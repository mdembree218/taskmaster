{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\CSC 495\\\\taskmaster\\\\task-manager\\\\src\\\\elements\\\\Settings.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { getUser, updateUser } from '../api';\nimport { AuthProvider } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Settings = () => {\n  _s();\n  const [user, setUser] = useState({\n    notificationsEnabled: false\n  });\n  useEffect(() => {\n    fetchUserSettings();\n  }, []);\n  const fetchUserSettings = async () => {\n    try {\n      const response = await getUser(AuthProvider.username); // Adjust the endpoint as needed\n      setUser(response.data);\n    } catch (error) {\n      console.error('Error fetching user settings', error);\n    }\n  };\n  const handleToggleNotifications = () => {\n    setUser({\n      ...user,\n      notificationsEnabled: !user.notificationsEnabled\n    });\n  };\n  const handleSaveSettings = async () => {\n    try {\n      await updateUser(AuthProvider.username, user); // Adjust the endpoint as needed\n      alert('Settings saved successfully');\n    } catch (error) {\n      console.error('Error saving settings', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Settings\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Notifications Enabled:\", /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: user.notificationsEnabled,\n        onChange: handleToggleNotifications\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSaveSettings,\n      children: \"Save\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(Settings, \"R7BQaDASUdSrvTNpaFYoBtbT+70=\");\n_c = Settings;\nexport default Settings;\nvar _c;\n$RefreshReg$(_c, \"Settings\");","map":{"version":3,"names":["React","useState","useEffect","getUser","updateUser","AuthProvider","jsxDEV","_jsxDEV","Settings","_s","user","setUser","notificationsEnabled","fetchUserSettings","response","username","data","error","console","handleToggleNotifications","handleSaveSettings","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","checked","onChange","onClick","_c","$RefreshReg$"],"sources":["E:/Documents/CSC 495/taskmaster/task-manager/src/elements/Settings.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { getUser, updateUser } from '../api';\r\nimport { AuthProvider } from '../context/AuthContext';\r\n\r\nconst Settings = () => {\r\n  const [user, setUser] = useState({ notificationsEnabled: false });\r\n\r\n  useEffect(() => {\r\n    fetchUserSettings();\r\n  }, []);\r\n\r\n  const fetchUserSettings = async () => {\r\n    try {\r\n      const response = await getUser(AuthProvider.username); // Adjust the endpoint as needed\r\n      setUser(response.data);\r\n    } catch (error) {\r\n      console.error('Error fetching user settings', error);\r\n    }\r\n  };\r\n\r\n  const handleToggleNotifications = () => {\r\n    setUser({ ...user, notificationsEnabled: !user.notificationsEnabled });\r\n  };\r\n\r\n  const handleSaveSettings = async () => {\r\n    try {\r\n      await updateUser(AuthProvider.username, user); // Adjust the endpoint as needed\r\n      alert('Settings saved successfully');\r\n    } catch (error) {\r\n      console.error('Error saving settings', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Settings</h2>\r\n      <label>\r\n        Notifications Enabled:\r\n        <input\r\n          type=\"checkbox\"\r\n          checked={user.notificationsEnabled}\r\n          onChange={handleToggleNotifications}\r\n        />\r\n      </label>\r\n      <button onClick={handleSaveSettings}>Save</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,EAAEC,UAAU,QAAQ,QAAQ;AAC5C,SAASC,YAAY,QAAQ,wBAAwB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtD,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC;IAAEW,oBAAoB,EAAE;EAAM,CAAC,CAAC;EAEjEV,SAAS,CAAC,MAAM;IACdW,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMA,iBAAiB,GAAG,MAAAA,CAAA,KAAY;IACpC,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMX,OAAO,CAACE,YAAY,CAACU,QAAQ,CAAC,CAAC,CAAC;MACvDJ,OAAO,CAACG,QAAQ,CAACE,IAAI,CAAC;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAED,MAAME,yBAAyB,GAAGA,CAAA,KAAM;IACtCR,OAAO,CAAC;MAAE,GAAGD,IAAI;MAAEE,oBAAoB,EAAE,CAACF,IAAI,CAACE;IAAqB,CAAC,CAAC;EACxE,CAAC;EAED,MAAMQ,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC,IAAI;MACF,MAAMhB,UAAU,CAACC,YAAY,CAACU,QAAQ,EAAEL,IAAI,CAAC,CAAC,CAAC;MAC/CW,KAAK,CAAC,6BAA6B,CAAC;IACtC,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C;EACF,CAAC;EAED,oBACEV,OAAA;IAAAe,QAAA,gBACEf,OAAA;MAAAe,QAAA,EAAI;IAAQ;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjBnB,OAAA;MAAAe,QAAA,GAAO,wBAEL,eAAAf,OAAA;QACEoB,IAAI,EAAC,UAAU;QACfC,OAAO,EAAElB,IAAI,CAACE,oBAAqB;QACnCiB,QAAQ,EAAEV;MAA0B;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrC,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG,CAAC,eACRnB,OAAA;MAAQuB,OAAO,EAAEV,kBAAmB;MAAAE,QAAA,EAAC;IAAI;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/C,CAAC;AAEV,CAAC;AAACjB,EAAA,CA3CID,QAAQ;AAAAuB,EAAA,GAARvB,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}