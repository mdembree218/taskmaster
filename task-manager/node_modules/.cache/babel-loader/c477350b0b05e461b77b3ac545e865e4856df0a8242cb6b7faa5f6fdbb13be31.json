{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\CSC 495\\\\taskmaster\\\\task-manager\\\\src\\\\elements\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { getTaskComments, addTaskComment, getUser // Assuming you have an API function to get user by username\n} from '../api';\nimport '../style/Comments.css'; // Assuming you have a CSS file for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = ({\n  taskId,\n  username\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState({\n    content: '',\n    author: null,\n    timestamp: null\n  });\n  const [error, setError] = useState('');\n  const [author, setAuthor] = useState(null);\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await getTaskComments(taskId);\n      setComments(response.data || []);\n    } catch (error) {\n      console.error('There was an error fetching the comments!', error);\n    }\n  }, [taskId]);\n  const fetchUserId = useCallback(async () => {\n    try {\n      const response = await getUser(username);\n      setAuthor(response.data.username); // Ensure author is a string (username)\n    } catch (error) {\n      console.error('There was an error fetching the user ID!', error);\n    }\n  }, [username]);\n  useEffect(() => {\n    fetchComments();\n    fetchUserId();\n  }, [fetchComments, fetchUserId]);\n  const handleCreateComment = async () => {\n    if (!newComment.content.trim()) {\n      setError('Content is mandatory.');\n      return;\n    }\n    if (!taskId) {\n      setError('Task ID is mandatory.');\n      return;\n    }\n    if (!author) {\n      setError('Author is mandatory.');\n      return;\n    }\n    const now = new Date();\n    const commentToCreate = {\n      taskId: taskId,\n      content: newComment.content,\n      author: author,\n      timestamp: [now.getUTCFullYear(), now.getUTCMonth() + 1,\n      // Months are zero-based in JavaScript\n      now.getUTCDate(), now.getUTCHours(), now.getUTCMinutes(), now.getUTCSeconds(), now.getUTCMilliseconds() * 1000 // Convert milliseconds to nanoseconds\n      ]\n    };\n    try {\n      const response = await addTaskComment(taskId, commentToCreate);\n      setComments([...comments, response.data]);\n      setNewComment({\n        content: '',\n        author: null,\n        timestamp: null\n      });\n      setError('');\n    } catch (error) {\n      console.error('There was an error creating the comment!', error);\n      console.error(error.response.data);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment.content,\n        onChange: e => setNewComment({\n          ...newComment,\n          content: e.target.value\n        }),\n        placeholder: \"New Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateComment,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"comments-list\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"comment-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-author\",\n          children: comment.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-content\",\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-timestamp\",\n          children: new Date(Date.UTC(comment.timestamp[0], comment.timestamp[1] - 1, comment.timestamp[2], comment.timestamp[3], comment.timestamp[4], comment.timestamp[5])).toLocaleString('en-US', {\n            year: 'numeric',\n            day: 'numeric',\n            month: 'long'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 25\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n};\n_s(Comment, \"hhcFqbmKaZoH8pTOafaFm8rlMWk=\");\n_c = Comment;\nexport default Comment;\nvar _c;\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","getTaskComments","addTaskComment","getUser","jsxDEV","_jsxDEV","Comment","taskId","username","_s","comments","setComments","newComment","setNewComment","content","author","timestamp","error","setError","setAuthor","fetchComments","response","data","console","fetchUserId","handleCreateComment","trim","now","Date","commentToCreate","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","map","comment","UTC","toLocaleString","year","day","month","id","_c","$RefreshReg$"],"sources":["E:/Documents/CSC 495/taskmaster/task-manager/src/elements/Comments.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport {\r\n    getTaskComments,\r\n    addTaskComment,\r\n    getUser // Assuming you have an API function to get user by username\r\n} from '../api';\r\nimport '../style/Comments.css'; // Assuming you have a CSS file for styling\r\n\r\nconst Comment = ({ taskId, username }) => {\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState({ content: '', author: null, timestamp: null });\r\n    const [error, setError] = useState('');\r\n    const [author, setAuthor] = useState(null);\r\n\r\n    const fetchComments = useCallback(async () => {\r\n        try {\r\n            const response = await getTaskComments(taskId);\r\n            setComments(response.data || []);\r\n        } catch (error) {\r\n            console.error('There was an error fetching the comments!', error);\r\n        }\r\n    }, [taskId]);\r\n\r\n    const fetchUserId = useCallback(async () => {\r\n        try {\r\n            const response = await getUser(username);\r\n            setAuthor(response.data.username); // Ensure author is a string (username)\r\n        } catch (error) {\r\n            console.error('There was an error fetching the user ID!', error);\r\n        }\r\n    }, [username]);\r\n\r\n    useEffect(() => {\r\n        fetchComments();\r\n        fetchUserId();\r\n    }, [fetchComments, fetchUserId]);\r\n\r\n    const handleCreateComment = async () => {\r\n        if (!newComment.content.trim()) {\r\n            setError('Content is mandatory.');\r\n            return;\r\n        }\r\n\r\n        if (!taskId) {\r\n            setError('Task ID is mandatory.');\r\n            return;\r\n        }\r\n\r\n        if (!author) {\r\n            setError('Author is mandatory.');\r\n            return;\r\n        }\r\n\r\n        const now = new Date();\r\n        const commentToCreate = {\r\n            taskId: taskId,\r\n            content: newComment.content,\r\n            author: author,\r\n            timestamp: [\r\n                now.getUTCFullYear(),\r\n                now.getUTCMonth() + 1, // Months are zero-based in JavaScript\r\n                now.getUTCDate(),\r\n                now.getUTCHours(),\r\n                now.getUTCMinutes(),\r\n                now.getUTCSeconds(),\r\n                now.getUTCMilliseconds() * 1000 // Convert milliseconds to nanoseconds\r\n            ]\r\n        };\r\n\r\n        try {\r\n            const response = await addTaskComment(taskId, commentToCreate);\r\n            setComments([...comments, response.data]);\r\n            setNewComment({ content: '', author: null, timestamp: null });\r\n            setError('');\r\n        } catch (error) {\r\n            console.error('There was an error creating the comment!', error);\r\n            console.error(error.response.data);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment-container\">\r\n            <h2>Comments</h2>\r\n            <div className=\"new-comment\">\r\n                <textarea\r\n                    value={newComment.content}\r\n                    onChange={(e) => setNewComment({ ...newComment, content: e.target.value })}\r\n                    placeholder=\"New Comment\"\r\n                />\r\n                <button onClick={handleCreateComment}>Add Comment</button>\r\n                {error && <p className=\"error\">{error}</p>}\r\n            </div>\r\n            <ul className=\"comments-list\">\r\n                {comments.map(comment => (\r\n                    <li key={comment.id} className=\"comment-item\">\r\n                        <span className=\"comment-author\">{comment.author}</span>\r\n                        <span className=\"comment-content\">{comment.content}</span>\r\n                        <span className=\"comment-timestamp\">\r\n                            {new Date(Date.UTC(comment.timestamp[0], comment.timestamp[1] - 1, comment.timestamp[2], comment.timestamp[3], comment.timestamp[4], comment.timestamp[5])).toLocaleString('en-US', {\r\n                                year: 'numeric',\r\n                                day: 'numeric',\r\n                                month: 'long'\r\n                            })}\r\n                        </span>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}