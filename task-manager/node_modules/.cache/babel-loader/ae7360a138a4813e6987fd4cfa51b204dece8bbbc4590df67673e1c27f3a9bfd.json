{"ast":null,"code":"var _jsxFileName = \"E:\\\\Documents\\\\CSC 495\\\\taskmaster\\\\task-manager\\\\src\\\\elements\\\\Comments.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useCallback } from 'react';\nimport { getTaskComments, addTaskComment, getUser // Assuming you have an API function to get user by username\n} from '../api';\nimport '../style/Comments.css'; // Assuming you have a CSS file for styling\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Comment = ({\n  taskId,\n  username\n}) => {\n  _s();\n  const {\n    currentUsername\n  } = useAuth();\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState({\n    content: '',\n    author: username,\n    timestamp: null\n  });\n  const [error, setError] = useState('');\n  const [userId, setUserId] = useState(null);\n  const fetchComments = useCallback(async () => {\n    try {\n      const response = await getTaskComments(taskId);\n      setComments(response.data || []);\n    } catch (error) {\n      console.error('There was an error fetching the comments!', error);\n    }\n  }, [taskId]);\n  const fetchUserId = useCallback(async () => {\n    try {\n      const response = await getUser(currentUsername);\n      setUserId(response.data.id);\n    } catch (error) {\n      console.error('There was an error fetching the user ID!', error);\n    }\n  }, [currentUsername]);\n  useEffect(() => {\n    fetchComments();\n    fetchUserId();\n  }, [fetchComments, fetchUserId]);\n  const handleCreateComment = async () => {\n    if (!newComment.content.trim()) {\n      setError('Content is mandatory.');\n      return;\n    }\n    if (!taskId) {\n      setError('Task ID is mandatory.');\n      return;\n    }\n    if (!userId) {\n      setError('User ID is mandatory.');\n      return;\n    }\n    const commentToCreate = {\n      ...newComment,\n      taskId,\n      userId,\n      timestamp: new Date().toISOString()\n    };\n    try {\n      const response = await addTaskComment(taskId, commentToCreate);\n      setComments([...comments, response.data]);\n      setNewComment({\n        content: '',\n        author: username,\n        timestamp: null\n      });\n      setError('');\n    } catch (error) {\n      console.error('There was an error creating the comment!', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Comments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-comment\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: newComment.content,\n        onChange: e => setNewComment({\n          ...newComment,\n          content: e.target.value\n        }),\n        placeholder: \"New Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCreateComment,\n        children: \"Add Comment\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 27\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"comments-list\",\n      children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"comment-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-author\",\n          children: comment.author\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-content\",\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"comment-timestamp\",\n          children: new Date(Date.UTC(comment.timestamp[0], comment.timestamp[1] - 1, comment.timestamp[2], comment.timestamp[3], comment.timestamp[4], comment.timestamp[5])).toLocaleString('en-US', {\n            year: 'numeric',\n            day: 'numeric',\n            month: 'long'\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n};\n_s(Comment, \"SGYpi5rGnHKtCRilpDfshprbF1Y=\", false, function () {\n  return [useAuth];\n});\n_c = Comment;\nexport default Comment;\nvar _c;\n$RefreshReg$(_c, \"Comment\");","map":{"version":3,"names":["React","useEffect","useState","useCallback","getTaskComments","addTaskComment","getUser","useAuth","jsxDEV","_jsxDEV","Comment","taskId","username","_s","currentUsername","comments","setComments","newComment","setNewComment","content","author","timestamp","error","setError","userId","setUserId","fetchComments","response","data","console","fetchUserId","id","handleCreateComment","trim","commentToCreate","Date","toISOString","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","map","comment","UTC","toLocaleString","year","day","month","_c","$RefreshReg$"],"sources":["E:/Documents/CSC 495/taskmaster/task-manager/src/elements/Comments.js"],"sourcesContent":["import React, { useEffect, useState, useCallback } from 'react';\r\nimport {\r\n    getTaskComments,\r\n    addTaskComment,\r\n    getUser // Assuming you have an API function to get user by username\r\n} from '../api';\r\nimport '../style/Comments.css'; // Assuming you have a CSS file for styling\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\nconst Comment = ({ taskId, username }) => {\r\n    const { currentUsername } = useAuth();\r\n    const [comments, setComments] = useState([]);\r\n    const [newComment, setNewComment] = useState({ content: '', author: username, timestamp: null });\r\n    const [error, setError] = useState('');\r\n    const [userId, setUserId] = useState(null);\r\n\r\n    const fetchComments = useCallback(async () => {\r\n        try {\r\n            const response = await getTaskComments(taskId);\r\n            setComments(response.data || []);\r\n        } catch (error) {\r\n            console.error('There was an error fetching the comments!', error);\r\n        }\r\n    }, [taskId]);\r\n\r\n    const fetchUserId = useCallback(async () => {\r\n        try {\r\n            const response = await getUser(currentUsername);\r\n            setUserId(response.data.id);\r\n        } catch (error) {\r\n            console.error('There was an error fetching the user ID!', error);\r\n        }\r\n    }, [currentUsername]);\r\n\r\n    useEffect(() => {\r\n        fetchComments();\r\n        fetchUserId();\r\n    }, [fetchComments, fetchUserId]);\r\n\r\n    const handleCreateComment = async () => {\r\n        if (!newComment.content.trim()) {\r\n            setError('Content is mandatory.');\r\n            return;\r\n        }\r\n\r\n        if (!taskId) {\r\n            setError('Task ID is mandatory.');\r\n            return;\r\n        }\r\n\r\n        if (!userId) {\r\n            setError('User ID is mandatory.');\r\n            return;\r\n        }\r\n\r\n        const commentToCreate = {\r\n            ...newComment,\r\n            taskId,\r\n            userId,\r\n            timestamp: new Date().toISOString()\r\n        };\r\n\r\n        try {\r\n            const response = await addTaskComment(taskId, commentToCreate);\r\n            setComments([...comments, response.data]);\r\n            setNewComment({ content: '', author: username, timestamp: null });\r\n            setError('');\r\n        } catch (error) {\r\n            console.error('There was an error creating the comment!', error);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"comment-container\">\r\n            <h2>Comments</h2>\r\n            <div className=\"new-comment\">\r\n                <textarea\r\n                    value={newComment.content}\r\n                    onChange={(e) => setNewComment({ ...newComment, content: e.target.value })}\r\n                    placeholder=\"New Comment\"\r\n                />\r\n                <button onClick={handleCreateComment}>Add Comment</button>\r\n                {error && <p className=\"error\">{error}</p>}\r\n            </div>\r\n            <ul className=\"comments-list\">\r\n                {comments.map(comment => (\r\n                    <li key={comment.id} className=\"comment-item\">\r\n                        <span className=\"comment-author\">{comment.author}</span>\r\n                        <span className=\"comment-content\">{comment.content}</span>\r\n                        <span className=\"comment-timestamp\">\r\n                            {new Date(Date.UTC(comment.timestamp[0], comment.timestamp[1] - 1, comment.timestamp[2], comment.timestamp[3], comment.timestamp[4], comment.timestamp[5])).toLocaleString('en-US', {\r\n                                year: 'numeric',\r\n                                day: 'numeric',\r\n                                month: 'long'\r\n                            })}\r\n                        </span>\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Comment;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}